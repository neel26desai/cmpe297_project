# -*- coding: utf-8 -*-
"""new--doc_gen_llm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J5F3NFiU7V025GLmARut9ianUC17R3rG
"""

pip install fastapi uvicorn markdown2

pip install --upgrade langchain-openai

!pip install openai==0.28

from google.colab import drive
drive.mount('/content/drive')

api_file_path = "/content/drive/My Drive/297-project-api-documentation-generator/sample_apis.py"
output_markdown_path = "/content/drive/My Drive/297-project-api-documentation-generator/api_docs.md"

"""**Step 1: Extract API Details**"""

pip install --upgrade langchain

pip install langchain-community

"""# **version 1**"""

import os
import openai
import markdown2
from fastapi.routing import APIRoute
from fastapi import FastAPI
import importlib.util


# Set your OpenAI API key
openai.api_key = ""


def load_api_file(file_path):
    """
    Load the FastAPI app from the provided file path dynamically.
    """
    spec = importlib.util.spec_from_file_location("module.name", file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)

    # Attempt to retrieve the FastAPI app instance
    for attr_name in dir(module):
        attr = getattr(module, attr_name)
        if isinstance(attr, FastAPI):
            return attr

    raise ValueError("No FastAPI app instance found in the provided file.")


def extract_routes(app):
    """
    Extract API route details from the FastAPI app instance.
    """
    routes = []
    for route in app.routes:
        if isinstance(route, APIRoute):
            methods = list(route.methods)
            path = route.path
            description = route.endpoint._doc_ or "No description available."
            routes.append({
                "methods": methods,
                "path": path,
                "description": description
            })
    return routes

def generate_documentation(route, prompt_template):
    """
    Generate documentation for a single API route using the OpenAI API.
    """
    prompt = prompt_template.format(
        methods=", ".join(route["methods"]),
        path=route["path"],
        description=route["description"]
    )

    response = openai.ChatCompletion.create(
        model="gpt-4",  # Replace with "gpt-3.5-turbo" if you're using the 3.5 model
        messages=[
            {"role": "system", "content": "You are a helpful assistant for generating API documentation."},
            {"role": "user", "content": prompt}
        ]
    )
    return response['choices'][0]['message']['content'].strip()


def save_to_markdown(routes, documentation, output_path):
    """
    Save the generated documentation to a Markdown file.
    """
    markdown_content = "# API Documentation\n\n"
    for route, doc in zip(routes, documentation):
        markdown_content += f"## Endpoint: {route['path']}\n"
        markdown_content += f"*Methods*: {', '.join(route['methods'])}\n\n"
        markdown_content += f"{doc}\n\n"

    with open(output_path, "w") as f:
        f.write(markdown2.markdown(markdown_content))


def main(api_file_path, output_markdown_path, prompt_version="v1.0"):
    """
    Main function to read the API file, generate documentation, and save it.
    """
    # Load the API file and extract routes
    app = load_api_file(api_file_path)
    routes = extract_routes(app)

    # Define a prompt template
    prompts = {
        "v1.0": "Generate detailed documentation for an API route:\n"
                "Methods: {methods}\nPath: {path}\nDescription: {description}\n",
        # Add more versions here if needed
    }
    prompt_template = prompts[prompt_version]

    # Generate documentation for each route
    documentation = []
    for route in routes:
        doc = generate_documentation(route, prompt_template)
        documentation.append(doc)

    # Save documentation to a Markdown file
    save_to_markdown(routes, documentation, output_markdown_path)
    print(f"Documentation saved to: {output_markdown_path}")


if __name__ == "__main__":
    # File paths on Google Drive
    api_file_path = "/content/drive/My Drive/297-project-api-documentation-generator/sample_apis.py"
    output_markdown_path = "/content/drive/My Drive/297-project-api-documentation-generator/api_docs.md"

"""# **version 2**"""

#new
def extract_api_details(file_path, framework):
    import importlib.util
    import inspect
    from fastapi.routing import APIRoute
    # Load the module
    spec = importlib.util.spec_from_file_location("api_module", file_path)
    api_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(api_module)

    endpoints = []

    if framework == "fastapi":
        app = getattr(api_module, "app", None)
        if app:
            for route in app.routes:
                if isinstance(route, APIRoute):
                    # Extract handler function and its code
                    handler = route.endpoint
                    code = inspect.getsource(handler) if handler else "Code not found"

                    endpoints.append({
                        "api_name": route.name or "Unnamed API",
                        "path": route.path,
                        "methods": list(route.methods),
                        "parameters": [param.name for param in route.dependant.path_params],
                        "code": code
                    })
    elif framework == "flask":
        app = getattr(api_module, "app", None)
        if app:
            for rule in app.url_map.iter_rules():
                # Extract handler function and its code
                handler = app.view_functions.get(rule.endpoint)
                code = inspect.getsource(handler) if handler else "Code not found"

                endpoints.append({
                    "api_name": rule.endpoint,
                    "path": rule.rule,
                    "methods": list(rule.methods - {"HEAD", "OPTIONS"}),
                    "parameters": list(rule.arguments),
                    "code": code
                })
    return endpoints

'''def extract_api_details(file_path, framework):
    import importlib.util
    from fastapi.routing import APIRoute

    spec = importlib.util.spec_from_file_location("api_module", file_path)
    api_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(api_module)

    endpoints = []

    if framework == "fastapi":
        app = getattr(api_module, "app", None)
        if app:
            for route in app.routes:
                if isinstance(route, APIRoute):
                    endpoints.append({
                        "api_name": route.name or "Unnamed API",
                        "path": route.path,
                        "methods": list(route.methods),
                        "parameters": [param.name for param in route.dependant.path_params]
                    })
    elif framework == "flask":
        app = getattr(api_module, "app", None)
        if app:
            for rule in app.url_map.iter_rules():
                endpoints.append({
                    "api_name": rule.endpoint,
                    "path": rule.rule,
                    "methods": list(rule.methods - {"HEAD", "OPTIONS"}),
                    "parameters": list(rule.arguments)
                })
    return endpoints
'''

"""**Step 2:Initialize LangChain and LLM**"""

pip install -U langchain langchain-openai

pip install langchain-community

pip install langchain-openai

from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_openai import ChatOpenAI

# Initialize the LLM
generation_llm = ChatOpenAI(model="gpt-4", temperature=0, api_key="")

# Define the prompt template
prompt_template = PromptTemplate(
    input_variables=["path", "methods", "parameters", "prompt"],
    template="{prompt}"
)

# Create the chain
generation_chain = LLMChain(
    llm=generation_llm,
    prompt=prompt_template
)

"""**Step 3: Generate Documentation for One API**"""

# Example endpoint details
example_endpoint = {
    "path": "/hello",
    "methods": ["GET"],
    "parameters": ["name"]
}
# Generate prompt for the endpoint
prompt = f"""
You are an expert API documentation specialist. Generate comprehensive API documentation for the following endpoint:
Path: {example_endpoint['path']}
Methods: {', '.join(example_endpoint['methods'])}
Parameters: {', '.join(example_endpoint['parameters']) if example_endpoint['parameters'] else 'None'}
"""
# Use the chain to generate documentation
response = generation_chain.run({
    "path": example_endpoint["path"],
    "methods": example_endpoint["methods"],
    "parameters": example_endpoint["parameters"],
    "prompt": prompt
})
# Print the documentation
print(response)

"""**Step 4: Process All APIs in the File**"""

def generate_api_documentation(api_file_path, framework):
    # Extract API details
    endpoints = extract_api_details(api_file_path, framework)

    # Store documentation for all endpoints
    documentation = []

    for endpoint in endpoints:
        # Generate prompt for the endpoint
        prompt = f"""
        You are an expert API documentation specialist. Generate comprehensive API documentation for the following endpoint:
        Path: {endpoint['path']}
        Methods: {', '.join(endpoint['methods'])}
        Parameters: {', '.join(endpoint['parameters']) if endpoint['parameters'] else 'None'}
        """

        # Use the chain to generate documentation
        result = generation_chain.run({
            "path": endpoint["path"],
            "methods": endpoint["methods"],
            "parameters": endpoint["parameters"],
            "prompt": prompt
        })

        # Save the result
        documentation.append({
            "path": endpoint["path"],
            "methods": endpoint["methods"],
            "parameters": endpoint["parameters"],
            "documentation": result
        })

        # Print documentation for review
        print(f"Documentation for {endpoint['path']}:\n{result}\n")

    return documentation

"""**step 5: save the doc to file**"""

def save_documentation_to_file(documentation, output_file_path):
    with open(output_file_path, "w") as f:
        for doc in documentation:
            f.write(f"# API Path: {doc['path']}\n")
            f.write(f"### Methods: {', '.join(doc['methods'])}\n")
            f.write(f"### Parameters: {', '.join(doc['parameters']) if doc['parameters'] else 'None'}\n")
            f.write(f"{doc['documentation']}\n\n")
    print(f"Documentation saved to {output_file_path}")

"""**step 6:run entire file**"""

# Path to the API file
api_file_path = "/content/drive/My Drive/297-project-api-documentation-generator/sample_apis.py"
framework = "fastapi"  # Set to "fastapi" or "flask" based on your project

# Generate documentation
documentation = generate_api_documentation(api_file_path, framework)

# Save to a Markdown file
output_file_path = "/content/drive/My Drive/297-project-api-documentation-generator/api_documentation_new.md"
save_documentation_to_file(documentation, output_file_path)

"""# **Version 3**"""

import openai
import os
import json
import logging
import inspect

# Set up logging
logging.basicConfig(filename="pipeline.log", level=logging.INFO, format="%(message)s")

# Set OpenAI API Key
os.environ["OPENAI_API_KEY"] = ""
openai.api_key = os.getenv("OPENAI_API_KEY")

def load_prompts(prompts_path):
    with open(prompts_path, 'r') as prompts_file:
        return json.load(prompts_file)

# Example usage
prompts_file = "prompts.json"
prompts = load_prompts(prompts_file)

def extract_api_details(file_path, framework):
    import importlib.util
    from fastapi.routing import APIRoute

    # Load the module
    spec = importlib.util.spec_from_file_location("api_module", file_path)
    api_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(api_module)

    endpoints = []

    if framework == "fastapi":
        app = getattr(api_module, "app", None)
        if app:
            for route in app.routes:
                if isinstance(route, APIRoute):
                    # Extract handler function and its code
                    handler = route.endpoint
                    code = inspect.getsource(handler) if handler else "Code not found"

                    endpoints.append({
                        "api_name": route.name or "Unnamed API",
                        "path": route.path,
                        "methods": list(route.methods),
                        "parameters": [param.name for param in route.dependant.path_params],
                        "code": code
                    })
    elif framework == "flask":
        app = getattr(api_module, "app", None)
        if app:
            for rule in app.url_map.iter_rules():
                # Extract handler function and its code
                handler = app.view_functions.get(rule.endpoint)
                code = inspect.getsource(handler) if handler else "Code not found"

                endpoints.append({
                    "api_name": rule.endpoint,
                    "path": rule.rule,
                    "methods": list(rule.methods - {"HEAD", "OPTIONS"}),
                    "parameters": list(rule.arguments),
                    "code": code
                })
    return endpoints

# Example usage
api_file = "sample_apis.py"
framework = "fastapi"
apis = extract_api_details(api_file, framework)

def call_openai(prompt, model="gpt-4", temperature=0):
    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[{"role": "system", "content": prompt}],
            temperature=temperature,
        )
        return response["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"Error during OpenAI API call: {e}")
        return f"Error: {e}"

import openai

def call_openai(prompt, model="gpt-4", temperature=0):
    try:
        response = openai.ChatCompletion.create(
            model=model,
            messages=[{"role": "system", "content": prompt}],
            temperature=temperature
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"Error during OpenAI API call: {e}")
        return f"Error: {e}"

def generate_and_evaluate(prompts, apis, output_file="results.txt"):
    results_text = []

    for api in apis:
        path = api['path']
        methods = api['methods']
        parameters = api['parameters']
        code = api['code']

        for version, prompt_template in prompts.items():
            filled_prompt = prompt_template.format(
                path=path,
                methods=methods,
                parameters=parameters,
                code=code
            )

            # Generate documentation using OpenAI API
            response_content = call_openai(filled_prompt)

            result_text = f"Path: {path}\nMethods: {methods}\nParameters: {parameters}\n\n"
            result_text += f"Generated Documentation:\n{response_content}\n{'-'*80}\n"
            results_text.append(result_text)

    # Save results to a text file
    with open(output_file, "w") as file:
        file.writelines(results_text)

    print(f"Results saved to {output_file}")

if __name__ == "__main__":
    # File paths and framework
    prompts_file = "prompts.json"
    api_file = "sample_apis.py"
    framework = "fastapi"

    # Load prompts and extract APIs
    prompts = load_prompts(prompts_file)
    apis = extract_api_details(api_file, framework)

    # Set OpenAI API Key
    openai.api_key = ""

    # Generate and evaluate documentation
    generate_and_evaluate(prompts, apis, output_file="results.txt")

